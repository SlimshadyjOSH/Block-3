# -*- coding: utf-8 -*-
"""
Created on Wed May 31 09:29:31 2023

@author: Melissa
"""

import streamlit as st
import pandas as pd
#from fuzzywuzzy import fuzz


# Read the Excel file into a DataFrame
df = pd.read_excel("C:/Users/Melissa/OneDrive - Avans Hogeschool/Documents/Utrecht/datasets/cleaned_data.xlsx")

# Clean all string columns
for column in df.columns:
    if df[column].dtype == 'object':
        df[column] = df[column].str.replace('"', '')
        df[column] = df[column].str.replace('{', '')
        df[column] = df[column].str.replace('}', '')
        df[column] = df[column].str.replace('[', '')
        df[column] = df[column].str.split(':').str.get(-1)
        
for column in df.columns:
    if df[column].dtype == 'object':
        df[column] = df[column].str.lower()

# There Are Many Columns That Start With Symptoms, All Of Them Should Be Considered.
diseases = df['Disease Name']
symptoms_columns = [col for col in df.columns if col.startswith('Symptoms')]

def main():
    # Add Title and Prompt for User Name
    st.title("Diagnostic Support System")
    user_name = st.text_input("Enter your last name")
    
    # Check if the user name is entered
    if user_name:
        # Add Title with User Name
        st.title(f"Welcome Doctor {user_name}")
        st.sidebar.title("Find the symptoms")
        
        search_query = st.sidebar.text_input("Enter symptom or body part to search")

        matching_values = []
        for column in df.columns:
            matching_rows = df[column].astype(str).str.contains(search_query, case=False, na=False)
            matching_values.extend(df.loc[matching_rows, column].unique())
        
        if search_query and len(matching_values) > 0:
            st.sidebar.write("Matching symptoms:")
            selected_values = []
            for i, value in enumerate(matching_values):
             checkbox_label = f"{value}"
             checkbox_key= f"checkbox-{i}"
             checkbox_value = st.sidebar.checkbox(checkbox_label, key=checkbox_key)
             if checkbox_value:
                 selected_values.append(value)
         
            if len(matching_values) > 0: 
                st.sidebar.write('Selected symptoms')
                for value in selected_values:
                    st.sidebar.write(f"- {value}")
                input_value = st.text_input("Selected Symptoms:", ", ".join(selected_values))

            else: 
                st.sidebar.write("No symptoms selected")
        else:
                 st.write("No matching symptoms found.")
        
        
        
        # User Input Code With Prompt "Enter your symptoms (comma-separated)"
        user_input = st.text_input("Enter your symptoms (comma-separated)")
        #user_input =st.text_input("Selected Values:",",".join(checkbox_value))
        
        
        # Convert User Symptoms From a String To a List
        user_symptoms = [s.strip() for s in user_input.split(",")]
        
        # Create Loops To Ensure All User Inputted Symptoms Are Associated With A Disease
        matching_diseases = []
        for i, row in df.iterrows():
            disease_symptoms = row[symptoms_columns].dropna().tolist()
            common_symptoms = set(disease_symptoms) & set(user_symptoms)
            if len(common_symptoms) > 0:
                #match_count = sum(fuzz.partial_ratio(symptom, disease) >= 80 for symptom in user_symptoms for disease in diseases)
                matching_diseases.append((row['Disease Name'], len(common_symptoms)))
        
        # To Avoid Information Overload, Set Max Diseases to 5 at a Time
        max_diseases = 5
        # Set Conditions To Display Results
        if len(matching_diseases) > 0:
            matching_diseases.sort(key=lambda x: x[1], reverse=True)
            total_diseases = len(matching_diseases)
            start_index = 0
            show_more_diseases = True  # Flag to control showing more diseases
            while start_index < total_diseases and show_more_diseases:
                end_index = start_index + max_diseases
                st.write("Most likely diseases based on your symptoms:")
                for i, (disease, match_count) in enumerate(matching_diseases[start_index:end_index], start=1):
                    st.write(f"- {disease} ({match_count} matching symptoms)")
                if end_index < total_diseases:
                    choice = st.selectbox("Show more diseases?", (None, "Yes", "No"), key=f"choice-{start_index}")
                    if choice == "Yes":
                        show_more_diseases = True  # Set flag to True to show more diseases
                    else:
                        show_more_diseases = False  # Set flag to False to stop showing more diseases
                        st.write("Thank you for using our services.")
                else:
                    st.write("No more diseases to display.")
                start_index = end_index
        else:
            st.write("No matching diseases found.")
    # Display a message if the user name is not entered
    else:
        st.write("Please enter your name.")
if __name__ == "__main__":
    main()
    


            
