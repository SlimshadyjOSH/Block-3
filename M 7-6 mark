# -*- coding: utf-8 -*-
"""
Created on Wed May 31 09:29:31 2023

@author: Melissa
"""

import streamlit as st
import pandas as pd


# Read the Excel file into a DataFrame
df = pd.read_excel("C:/Users/Melissa/OneDrive - Avans Hogeschool/Documents/Utrecht/datasets/cleaned_data.xlsx")

# Clean all string columns
for column in df.columns:
    if df[column].dtype == 'object':
        df[column] = df[column].str.replace('"', '')
        df[column] = df[column].str.replace('{', '')
        df[column] = df[column].str.replace('}', '')
        df[column] = df[column].str.replace('[', '')
        df[column] = df[column].str.split(':').str.get(-1)

# There Are Many Columns That Start With Symptoms, All Of Them Should Be Considered.
diseases = df['Disease Name']
symptoms_columns = [col for col in df.columns if col.startswith('Symptoms')]

def main():
    # Add Title and Prompt for User Name
    
    def add_bg_from_url():
        st.markdown(
             f"""
             <style>
             .stApp {{
                 background-image: url("https://png.pngtree.com/background/20210709/original/pngtree-ppt-medical-background-blue-border-picture-image_963073.jpg");
                 background-attachment: fixed;
                 background-position: center top;
                 background-size: cover
             }}
             </style>
             """,
             unsafe_allow_html=True
         )

    add_bg_from_url()
    
    
    st.title("Diagnostic Support System (DSS) ")
    
    user_name = None
    
    if not user_name == :
        st.write("Welcome to DSS. A diagnostic tool to help you in times of a high word load")
        st.write("Warning - Use of this tool as a second opinion. Not as a direct sourse of diagnosis")
    else:
        st.write("")
    
    # remove input after something is inputted
    input_container = st.empty()
    user_name = input_container.text_input("Enter your last name to login")
 
    # Check if the user name is entered
    if user_name:
        
        
        #clean the login page
        input_container.empty()
        # Add Title with User Name
        st.markdown("<hr>", unsafe_allow_html=True)

        st.header(f"Welcome Doctor {user_name}")
        
        select = st.button("Show instructions")

        if "show_text" not in st.session_state:
            st.session_state["show_text"] = False

        if select:
            st.session_state["show_text"] = not st.session_state["show_text"]

        if st.session_state["show_text"]:
            st.write('Hello and welcome to our application DDS. This application can help you with making diagnoses and give you some new insights. To get started let us tell you how the program works. You start by giving us the symptoms the patient is experiencing, and we will compare these symptoms to our dataset full of diseases with symptoms. Based on the dataset, it will give you the diseases that match with your symptoms.')
            st.write('To use this tool, there are two options: write the symptoms of the patient below or use the search bar in the sidebar (at the top of your screen).')
            st.write("Let's get started!")
            st.caption('The application will automatically load the top 5 suggested symptoms')

 
        
        
        # User Input Code With Prompt "Enter your symptoms (comma-separated)"
        user_input = st.text_input("Enter the symptoms yourself (comma-separated)")
        
        # Add Title of side bar 
        st.sidebar.title("Find the symptoms")
        # Add Input box in the side bar 
        search_query = st.sidebar.text_input("Enter symptom or body part to search")

        # Search the data set for matching values
        matching_values = []
        for column in df.columns:
            matching_rows = df[column].astype(str).str.contains(search_query, case=False, na=False)
            matching_values.extend(df.loc[matching_rows, column].unique())

        # Filter out duplicate symptoms
        matching_values = list(set(matching_values))
        
        #create a empty list befor the input is inputted
        selected_values=[]

        # Shows Matching symptoms when there are matching results
        if search_query and len(matching_values) > 0:
            st.sidebar.write("Matching symptoms:")

            # Make checkboxes for the matching symptoms
            selected_values = []
            for i, value in enumerate(matching_values):
                checkbox_label = f"{value}"
                checkbox_key = f"checkbox-{i}"
                checkbox_value = st.sidebar.checkbox(checkbox_label, key=checkbox_key)
                if checkbox_value:
                    selected_values.append(value)
        
        # Add the selected symptoms into an input box on the homepage
        if len(matching_values) > 0:
            st.sidebar.write('Selected symptoms')
            for value in selected_values:
                st.sidebar.write(f"- {value}")
            input_value = st.text_input("Selected the symptoms with the sidebar", ", ".join(selected_values))
        else:
            st.sidebar.write("No symptoms selected")


        # Convert User Symptoms From a String To a List
        user_symptoms = [s.strip() for s in user_input.split(",")]
        if len(matching_values) > 0:
            user_symptoms = [s.strip() for s in input_value.split(",")]

        # Create Loops To Ensure All User Inputted Symptoms Are Associated With A Disease
        matching_diseases = []
        for i, row in df.iterrows():
            disease_symptoms = row[symptoms_columns].dropna().tolist()
            common_symptoms = set(disease_symptoms) & set(user_symptoms)
            if len(common_symptoms) > 0:
                matching_diseases.append((row['Disease Name'], len(common_symptoms)))

        # To Avoid Information Overload, Set Max Diseases to 5 at a Time
        max_diseases = 5
        # Set Conditions To Display Results
        if len(matching_diseases) > 0:
            matching_diseases.sort(key=lambda x: x[1], reverse=True)
            total_diseases = len(matching_diseases)
            start_index = 0
            show_more_diseases = True  # Flag to control showing more diseases
            while start_index < total_diseases and show_more_diseases:
                end_index = start_index + max_diseases
                st.write("Most likely diseases based on your symptoms:")
                for i, (disease, match_count) in enumerate(matching_diseases[start_index:end_index], start=1):
                    st.write(f"- {disease} ({match_count} matching symptoms)")
                if end_index < total_diseases:
                    choice = st.selectbox("Show more diseases?", (None, "Yes", "No"), key=f"choice-{start_index}")
                    st.markdown("<hr>", unsafe_allow_html=True)
                    if choice == "Yes":
                        show_more_diseases = True  # Set flag to True to show more diseases
                    if choice == "No":
                        show_more_diseases = False  # Set flag to False to stop showing more diseases
                        st.empty()
                        
                        st.write("Did you find out what the disease was? fill it into the input bar")
                        disease_input = st.text_input("Enter the Disease")
                        
                        st.write("Thank you for using our services. Have a nice day!")
                    else:
                        show_more_diseases = False  # Set flag to False to stop showing more diseases
                        
                        st.write("")
                        
                else:
                    st.write("No more diseases to display.")
                start_index = end_index
        else:
            st.write("No matching diseases found.")
    # Display a message if the user name is not entered
    else:
        st.write("Please enter your name.")

if __name__ == "__main__":
    main()
